package utilsDraw

import (
	"fmt"
	"github.com/helmutkemper/webassembly/examples/ide/rulesDensity"
	"math"
)

// Polygon
//
// English:
//
//	Generates the list of vertex points (x, y) for a regular polygon centered at (cx, cy).
//
//	Each point is calculated using polar coordinates, then converted to Cartesian.
//
//	The polygon can be rotated by a given angle (in radians).
//
// Português:
//
//	Gera a lista de pontos vértices (x, y) de um polígono regular centrado em (cx, cy).
//
//	Cada ponto é calculado usando coordenadas polares, depois convertido para cartesiano.
//
//	O polígono pode ser rotacionado por um determinado ângulo (em radianos).
func Polygon(sides int, radius, cx, cy rulesDensity.Density, rotation float64) [][]rulesDensity.Density {
	// Centro do canvas

	// Gerar os pontos do polígono
	points := make([][]rulesDensity.Density, 0, sides+1)
	for i := 0; i <= sides; i++ {
		angle := (2*math.Pi*float64(i))/float64(sides) + rotation
		x := float64(cx) + float64(radius)*math.Cos(angle)
		y := float64(cy) + float64(radius)*math.Sin(angle)
		points = append(points, []rulesDensity.Density{rulesDensity.Density(x), rulesDensity.Density(y)})
	}

	return points
}

// PolygonPath
//
// English:
//
//	Creates an SVG path command slice to draw a closed polygon using the points
//	generated by the Polygon function. It starts with a 'move to' (M),
//	continues with 'line to' (L) for each point, and ends with 'z' to close the shape.
//
// Português:
//
//	Cria um slice de comandos SVG para desenhar um polígono fechado usando os pontos
//	gerados pela função Polygon. Inicia com 'move to' (M),
//	continua com 'line to' (L) para cada ponto, e termina com 'z' para fechar o formato.
func PolygonPath(sides int, radius, cx, cy rulesDensity.Density, rotation float64) (path []string) {
	points := Polygon(sides, radius, cx, cy, rotation)

	path = []string{
		fmt.Sprintf("M %v %v", points[0][0], points[0][1]),
	}
	for i := 1; i < len(points); i++ {
		path = append(path, fmt.Sprintf("L %v %v", points[i][0], points[i][1]))
	}
	path = append(path, "z")

	return
}
